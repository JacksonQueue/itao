<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

	<bean id="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:/spring/jdbc.properties" />
	</bean>

	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxWait" value="${jdbc.maxWait}" />

		<property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
		<property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}" />

		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="validationQueryTimeout" value="${jdbc.validationQueryTimeout}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

		<property name="timeBetweenLogStatsMillis" value="${jdbc.timeBetweenLogStatsMillis}" />

		<property name="filters" value="${jdbc.filters}" />
		<property name="connectionProperties" value="${jdbc.connectionProperties}" />
		<property name="proxyFilters">
			<list>
				<bean class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
					<property name="statementPrepareAfterLogEnabled" value="false" />
					<property name="statementExecuteAfterLogEnabled" value="false" />
					<property name="statementExecutableSqlLogEnable" value="true" />
				</bean>
			</list>
		</property>
	</bean>

	<!-- mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源 MyBatis定义数据源,同意加载配置 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件，**表示迭代查找 -->
		<property name="mapperLocations" value="classpath*:/com/leafnet/itao/**/*Mapper.xml" />
	</bean>

	<!-- 1) annotation : 这个方法，扫描器会去注册所有的接口，也可以指定接口作为父类。 2) factory-ref : 在指定使用SqlSessionFactory的情况下，这里有一个或多个的Spring的容器。经常我们会使用一个或多个的数据库。 
		3) marker-interface : 这个扫描器将会注册所有的接口，也有指定有注解。 4) template-ref : 在指定使用SqlSessionTemplate的情况下，这里有一个或多个的Spring的容器。经常我们会使用一个或多个的数据库。 
		5) name-generator : 它的完全限定类名beannamegenerator用于命名所检测到的组件.F -->
	<!-- <mybatis-spring:scan base-package="com.leafnet" marker-interface="" 
		factory-ref=""/> -->

	<mybatis-spring:scan base-package="com.leafnet.itao" marker-interface="com.leafnet.itao.mapper.basic.BasicMapper"
	factory-ref="sqlSessionFactoryBean"/>

	<!-- 事务管理(声明式事务) -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 支持事务注解的(@Transactional) -->
	<tx:annotation-driven />

	<!-- 声明式事务管理<tx:advice/> 有关的设置 
	               事务的传播属性Propagation： 默认是REQUIRED(required)
	      1) REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 
		  2) SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。 
		  3) MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。 
		  4) REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。 
		  5) NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 
		  6) NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。 
		  7) NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务
		     事务的隔离级别isolation: 默认四DEFAULT
		    
	-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="query*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<!-- 建议do开头的方法 -->
			<tx:method name="*" read-only="false" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
    
    <!-- proxy-target-class:默认是false
           false : javaSE(JDK)动态代理
           true  : 基于cglib动态代理（spring框架中的代理）
         expose-proxy : 默认是false
           true : 在该线程内将会暴露proxy代理对象，实现共享，即在该线程中的任何地方都可以都可以取到proxy代理对象。具体是由ThreadLocal设计模式来实现的 
                           事例说明:http://blog.csdn.net/wxwzy738/article/details/27566645
                           
                     通配符(* com.leafnet..*.*(..))
		|第一个 * —— 通配 任意返回值类型| 
		|第二个 * —— 通配 包com.leafnet下的任意class| 
		|第三个 * —— 通配 包com.leafnet下的任意class的任意方法| 
		|第四个 .. —— 通配 方法可以有0个或多个参数| 
		within 用于匹配指定类型内的方法执行 
		<aop:advisor> 大多用于事务管理
		<aop:aspect>  大多用于日志，缓存                           
     -->
    <aop:config proxy-target-class="true" expose-proxy="true">
        <aop:pointcut id="servicePointcut" 
          expression="execution(* com.leafnet.itao..*.*(..)) and @within(org.springframework.stereotype.Service)" />
        <aop:advisor pointcut-ref="servicePointcut" advice-ref="txAdvice" />  
    </aop:config>


</beans>
